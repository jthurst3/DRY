@article{ProgramSimilarityPopulations,
        author={WHALE,G.},
        year={1990},
        title={IDENTIFICATION OF PROGRAM SIMILARITY IN LARGE POPULATIONS},
        journal={COMPUTER JOURNAL},
        volume={33},
        number={2},
        pages={140-146},
        keywords={COMPUTER SCIENCE, HARDWARE \& ARCHITECTURE},
        isbn={0010-4620},
        language={English},
}

@article{PlagiarismProgrammingAssignments,
        author={Joy,M. and Joy,M. and Luck,M.},
        year={1999},
        title={Plagiarism in programming assignments},
        journal={IEEE Transactions on Education},
        volume={42},
        number={2},
        pages={129-133},
        abstract={The assessment of programming courses is usually carried out by means of programming assignments. Since it is simple to copy and edit computer programs, however, there will always be a temptation among some students following such courses to copy and modify the work of others. As the number of students in these courses is often high, it can be very difficult to detect this plagiarism. The authors have developed a package which will allow programming assignments to be submitted online, and which includes software to assist in detecting possible instances of plagiarism. In this paper, they discuss the concerns that motivated this work, describe the developed software, tailoring the software to different requirements and finally consider its implications for large group teaching.},
        keywords={students; courses; programming courses; EDUCATION, SCIENTIFIC DISCIPLINES; computer science; plagiarism; computer science education; ENGINEERING, ELECTRICAL \& ELECTRONIC; computer programs; software; large group teaching; programming; teaching; programming assignments assessment},
        isbn={0018-9359},
        language={English},
}

@article{
        NoSilverBullet,
        author={Brooks},
        year={1987},
        title={No Silver Bullet Essence and Accidents of Software Engineering},
        journal={Computer},
        volume={20},
        number={4},
        pages={10-19},
        keywords={Costs; Technological innovation; Roads; Industrial accidents; Hardware; Computer industry; Diseases; Software engineering; Silver; Project management},
        isbn={0018-9162},
        language={English},
}


@article{
        Modularity1979,
        author={Baker,A. L. and Zweben,S. H.},
        year={1979},
        title={The Use of Software Science in Evaluating Modularity Concepts},
        journal={IEEE Transactions on Software Engineering},
        volume={SE-5},
        number={2},
        pages={110-120},
        abstract={An investigation is made into the extent to which relationships from software science are useful in analyzing programming methodology principles that are concerned with modularity. Using previously published data from over 500 programs, it is shown that the software science effort measure provides quantitative answers to questions concerning the conditions under which modularization is beneficial. Among the issues discussed are the reduction of similar code sequences by temporary variable and subprogram defmition, and the use of global variables. Using data flow analysis, environmental considerations which affect the applicability of alternative modularity techniques are also discussed.},
        keywords={Chemicals; program transformations; Software measurement; Data flow analysis; Software tools; operator and operand identification; Data analysis; Area measurement; software science; Programming environments; modularity; Particle measurements; Computer interfaces; programming effort; Problem-solving; Information science; Software; Codes; Programming languages; Principles; Programmers; Measures; Analysis; Strategy; Computer science; Computer programming},
        isbn={0098-5589},
        language={English},
}
}

@inproceedings{
        LogicalModularity,
        author={Ratiu,D. and Marinescu,R. and Jurjens,J.},
        editor={ },
        year={2009},
        title={The Logical Modularity of Programs},
        pages={123-127},
        abstract={The principles and best practices of object oriented design require that modules in a program should match logical decomposition of the knowledge that the program implements. The violation of these modularization rules leads to several undesired consequences: (i) non-cohesive modules that mix different kinds of knowledge and (ii) logically coupled modules due to a dispersion of conceptually cohesive knowledge. In this paper, we use domain knowledge driven program analysis to detect and characterize discrepancies between the structural modularization of programs and the conceptual decomposition of the implemented knowledge. We characterize the mismatches at the levels of granularity of packages and classes and present their impact on different maintenance activities. The presented approach includes a technique for automating the recovery of mappings between the different categories of knowledge used in the program and the modules that implement them. We briefly present our experience with analyzing JHotDraw.},
        keywords={program diagnostics; noncohesive module; conceptually cohesive knowledge; object oriented design; programs logical modularity; object-oriented programming; domain knowledge-driven program analysis; ontology; logically coupled module; software maintenance; maintenance activity; conceptual decomposition; ontologies (artificial intelligence)},
        isbn={0769538673, 9780769538679},
        language={English},
}
}

@article{
        Functional1989,
        author={HUGHES,J.},
        year={1989},
        title={WHY FUNCTIONAL PROGRAMMING MATTERS},
        journal={COMPUTER JOURNAL},
        volume={32},
        number={2},
        pages={98-107},
        keywords={COMPUTER SCIENCE, HARDWARE \& ARCHITECTURE},
        isbn={0010-4620},
        language={English},
}
}

@misc{
        WETness,
        title={The WET Cart - The Daily WTF},
        howpublished={\url{http://thedailywtf.com/articles/The-WET-Cart}},
        note={Accessed: 2014-12-02}
}

@misc{
        Javaparser,
        title={javaparser - Java 1.5 Parser and AST - Google Project Hosting},
        howpublished={\url{https://code.google.com/p/javaparser/}},
        note={Accessed: 2014-12-03}
}

@article{
        TreeEditDistance,
        author={Pawlik,Mateusz and Augsten,Nikolaus},
        year={2011},
        title={RTED: A Robust Algorithm for the Tree Edit Distance},
        abstract={We consider the classical tree edit distance between ordered labeled trees, which is defined as the minimum-cost sequence of node edit operations that transform one tree into another. The state-of-the-art solutions for the tree edit distance are not satisfactory. The main competitors in the field either have optimal worst-case complexity, but the worst case happens frequently, or they are very efficient for some tree shapes, but degenerate for others. This leads to unpredictable and often infeasible runtimes. There is no obvious way to choose between the algorithms. In this paper we present RTED, a robust tree edit distance algorithm. The asymptotic complexity of RTED is smaller or equal to the complexity of the best competitors for any input instance, i.e., RTED is both efficient and worst-case optimal. We introduce the class of LRH (Left-Right-Heavy) algorithms, which includes RTED and the fastest tree edit distance algorithms presented in literature. We prove that RTED outperforms all previously proposed LRH algorithms in terms of runtime complexity. In our experiments on synthetic and real world data we empirically evaluate our solution and compare it to the state-of-the-art.},
        keywords={Databases; Computer Science},
        language={English},
}

@article{
        PlagiarismDetectionSurvey,
        author={Parker, A. and Hamblen, J.O.},
        journal={Education, IEEE Transactions on},
        title={Computer algorithms for plagiarism detection},
        year={1989},
        month={May},
        volume={32},
        number={2},
        pages={94-99},
        keywords={computer science education;educational administrative data processing;industrial property;security of data;computer algorithms;plagiarism detection;student plagiarism;Automatic control;Change detection algorithms;Character generation;Computer networks;Helium;Logic;Microcomputers;Plagiarism;White spaces;Writing},
        doi={10.1109/13.28038},
        ISSN={0018-9359}
}

@book{
        PragmaticProgrammer,
        author={Hunt,Andrew and Thomas,David},
        year={1999},
        title={The Pragmatic Programmer: From Journeyman to Master},
        publisher={Addison-Wesley Professional},
        abstract={What others in the trenches say about The Pragmatic Programmer... “The cool thing about this book is that it’s great for keeping the programming process fresh. The book helps you to continue to grow and clearly comes from people who have been there.”          —Kent Beck, author of Extreme Programming Explained: Embrace Change “I found this book to be a great mix of solid advice and wonderful analogies!”          —Martin Fowler, author of Refactoring and UML Distilled “I would buy a copy, read it twice, then tell all my colleagues to run out and grab a copy. This is a book I would never loan because I would worry about it being lost.”          —Kevin Ruland, Management Science, MSG-Logistics “The wisdom and practical experience of the authors is obvious. The topics presented are relevant and useful... By far its greatest strength for me has been the outstanding analogies—tracer bullets, broken windows, and the fabulous helicopter-based explanation of the need for orthogonality, especially in a crisis situation. I have little doubt that this book will eventually become an excellent source of useful information for journeymen programmers and expert mentors alike.”          —John Lakos, author of Large-Scale C++ Software Design “This is the sort of book I will buy a dozen copies of when it comes out so I can give it to my clients.”          —Eric Vought, Software Engineer “Most modern books on software development fail to cover the basics of what makes a great software developer, instead spending their time on syntax or technology where in reality the greatest leverage possible for any software team is in having talented developers who really know their craft well. An excellent book.”          —Pete McBreen, Independent Consultant “Since reading this book, I have implemented many of the practical suggestions and tips it contains. Across the board, they have saved my company time and money while helping me get my job done quicker! This should be a desktop reference for everyone who works with code for a living.”          —Jared Richardson, Senior Software Developer, iRenaissance, Inc. “I would like to see this issued to every new employee at my company...”          —Chris Cleeland, Senior Software Engineer, Object Computing, Inc. “If I’m putting together a project, it’s the authors of this book that I want. . . . And failing that I’d settle for people who’ve read their book.”          —Ward Cunningham Straight from the programming trenches, The Pragmatic Programmer cuts through the increasing specialization and technicalities of modern software development to examine the core process--taking a requirement and producing working, maintainable code that delights its users. It covers topics ranging from personal responsibility and career development to architectural techniques for keeping your code flexible and easy to adapt and reuse. Read this book, and you'll learn how to Fight software rot; Avoid the trap of duplicating knowledge; Write flexible, dynamic, and adaptable code; Avoid programming by coincidence; Bullet-proof your code with contracts, assertions, and exceptions; Capture real requirements; Test ruthlessly and effectively; Delight your users; Build teams of pragmatic programmers; and Make your developments more precise with automation. Written as a series of self-contained sections and filled with entertaining anecdotes, thoughtful examples, and interesting analogies, The Pragmatic Programmer illustrates the best practices and major pitfalls of many different aspects of software development. Whether you're a new coder, an experienced programmer, or a manager responsible for software projects, use these lessons daily, and you'll quickly see improvements in personal productivity, accuracy, and job satisfaction. You'll learn skills and develop habits and attitudes that form the foundation for long-term success in your career. You'll become a Pragmatic Programmer.},
        keywords={Software Engineering \& Development},
        isbn={020161622X, 9780201616224},
        language={English},
}

@article{GraphSimilarityStudentPrograms,
        author={Naudé,Kevin A. and Greyling,Jean H. and Vogts,Dieter},
        year={2010},
        title={Marking student programs using graph similarity},
        journal={Computers \& Education},
        volume={54},
        number={2},
        pages={545-561},
        abstract={We present a novel approach to the automated marking of student programming assignments. Our technique quantifies the structural similarity between unmarked student submissions and marked solutions, and is the basis by which we assign marks. This is accomplished through an efficient novel graph similarity measure (AssignSim). Our experiments show good correlation of assigned marks with that of a human marker. (C) 2009 Elsevier Ltd. All rights reserved.},
        keywords={Graph similarity; COMPUTER SCIENCE, INTERDISCIPLINARY APPLICATIONS; Computer-assisted assessment; Programming and programming languages; EDUCATION \& EDUCATIONAL RESEARCH},
        isbn={0360-1315},
        language={English},
}

@article{
        McGahn1995,
        author={McGahn,Donald F.},
        year={1995},
        title={Copyright Infringement of Protected Computer Software: An Analytical Method to Determine Substantial Similarity},
        journal={Rutgers Computer and Technology Law Journal},
        volume={21},
        number={1},
        pages={88},
        keywords={Analysis; Copyright; Copyright infringement},
        isbn={0735-8938},
        language={English},
}

@article{
        Tu1994,
        author={Tu,Tsu-Man P.},
        year={1994},
        title={Copyright - computer software copyright infringement - three-step test for substantial similarity, involving abstraction, filtration, and comparison should be applied in determining whether computer software copyright has been infringed},
        journal={Seton Hall Law Review},
        volume={25},
        number={1},
        pages={412},
        keywords={Cases; Copyright; Software protection},
        isbn={0586-5964},
        language={English},
}


