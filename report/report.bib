@article{ProgramSimilarityPopulations,
        author={WHALE,G.},
        year={1990},
        title={IDENTIFICATION OF PROGRAM SIMILARITY IN LARGE POPULATIONS},
        journal={COMPUTER JOURNAL},
        volume={33},
        number={2},
        pages={140-146},
        note={\url{http://gateway.webofknowledge.com/gateway/Gateway.cgi?GWVersion=2\&SrcAuth=SerialsSolutions\&SrcApp=Summon\&KeyUT=A1990CZ98300007\&DestLinkType=FullRecord\&DestApp=WOS}},
        keywords={COMPUTER SCIENCE, HARDWARE & ARCHITECTURE},
        isbn={0010-4620},
        language={English},
}

@article{PlagiarismProgrammingAssignments,
        author={Joy,M. and Joy,M. and Luck,M.},
        year={1999},
        title={Plagiarism in programming assignments},
        journal={IEEE Transactions on Education},
        volume={42},
        number={2},
        pages={129-133},
        note={\url{http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=762946}},
        abstract={The assessment of programming courses is usually carried out by means of programming assignments. Since it is simple to copy and edit computer programs, however, there will always be a temptation among some students following such courses to copy and modify the work of others. As the number of students in these courses is often high, it can be very difficult to detect this plagiarism. The authors have developed a package which will allow programming assignments to be submitted online, and which includes software to assist in detecting possible instances of plagiarism. In this paper, they discuss the concerns that motivated this work, describe the developed software, tailoring the software to different requirements and finally consider its implications for large group teaching.},
        keywords={students; courses; programming courses; EDUCATION, SCIENTIFIC DISCIPLINES; computer science; plagiarism; computer science education; ENGINEERING, ELECTRICAL &amp; ELECTRONIC; computer programs; software; large group teaching; programming; teaching; programming assignments assessment},
        isbn={0018-9359},
        language={English},
}

@article{
        NoSilverBullet,
        author={Brooks},
        year={1987},
        title={No Silver Bullet Essence and Accidents of Software Engineering},
        journal={Computer},
        volume={20},
        number={4},
        pages={10-19},
        note={\url{http://openurl.lib.rochester.edu/?ctx_ver=Z39.88-2004&ctx_enc=info%3Aofi%2Fenc%3AUTF-8&rfr_id=info:sid/summon.serialssolutions.com&rft_val_fmt=info:ofi/fmt:kev:mtx:journal&rft.genre=article&rft.atitle=No+Silver+Bullet+Essence+and+Accidents+of+Software+Engineering&rft.jtitle=Computer&rft.au=Brooks&rft.date=1987&rft.pub=IEEE&rft.issn=0018-9162&rft.eissn=1558-0814&rft.volume=20&rft.issue=4&rft.spage=10&rft.epage=19&rft_id=info:doi/10.1109%2FMC.1987.1663532&rft.externalDocID=2&paramdict=en-US}},
        keywords={Costs; Technological innovation; Roads; Industrial accidents; Hardware; Computer industry; Diseases; Software engineering; Silver; Project management},
        isbn={0018-9162},
        language={English},
}


@article{
        Modularity1979,
        author={Baker,A. L. and Zweben,S. H.},
        year={1979},
        title={The Use of Software Science in Evaluating Modularity Concepts},
        journal={IEEE Transactions on Software Engineering},
        volume={SE-5},
        number={2},
        pages={110-120},
        note={\url{http://openurl.lib.rochester.edu/?ctx_ver=Z39.88-2004&ctx_enc=info%3Aofi%2Fenc%3AUTF-8&rfr_id=info:sid/summon.serialssolutions.com&rft_val_fmt=info:ofi/fmt:kev:mtx:journal&rft.genre=article&rft.atitle=The+Use+of+Software+Science+in+Evaluating+Modularity+Concepts&rft.jtitle=IEEE+Transactions+on+Software+Engineering&rft.au=Baker%2C+A.L&rft.au=Zweben%2C+S.H&rft.date=1979&rft.pub=IEEE&rft.issn=0098-5589&rft.volume=SE-5&rft.issue=2&rft.spage=110&rft.epage=120&rft_id=info:doi/10.1109%2FTSE.1979.234167&rft.externalDocID=32&paramdict=en-US}},
        abstract={An investigation is made into the extent to which relationships from software science are useful in analyzing programming methodology principles that are concerned with modularity. Using previously published data from over 500 programs, it is shown that the software science effort measure provides quantitative answers to questions concerning the conditions under which modularization is beneficial. Among the issues discussed are the reduction of similar code sequences by temporary variable and subprogram defmition, and the use of global variables. Using data flow analysis, environmental considerations which affect the applicability of alternative modularity techniques are also discussed.},
        keywords={Chemicals; program transformations; Software measurement; Data flow analysis; Software tools; operator and operand identification; Data analysis; Area measurement; software science; Programming environments; modularity; Particle measurements; Computer interfaces; programming effort; Problem-solving; Information science; Software; Codes; Programming languages; Principles; Programmers; Measures; Analysis; Strategy; Computer science; Computer programming},
        isbn={0098-5589},
        language={English},
}
}

@inproceedings{
        LogicalModularity,
        author={Ratiu,D. and Marinescu,R. and Jurjens,J.},
        editor={ },
        year={2009},
        title={The Logical Modularity of Programs},
        pages={123-127},
        note={\url{http://openurl.lib.rochester.edu/?ctx_ver=Z39.88-2004&ctx_enc=info%3Aofi%2Fenc%3AUTF-8&rfr_id=info:sid/summon.serialssolutions.com&rft_val_fmt=info:ofi/fmt:kev:mtx:book&rft.genre=proceeding&rft.title=2009+16th+Working+Conference+on+Reverse+Engineering&rft.atitle=The+Logical+Modularity+of+Programs&rft.au=Ratiu%2C+D&rft.au=Marinescu%2C+R&rft.au=Jurjens%2C+J&rft.date=2009-01-01&rft.isbn=0769538673&rft.issn=1095-1350&rft.spage=123&rft.epage=127&rft_id=info:doi/10.1109%2FWCRE.2009.29&rft.externalDocID=5328618&paramdict=en-US}},
        abstract={The principles and best practices of object oriented design require that modules in a program should match logical decomposition of the knowledge that the program implements. The violation of these modularization rules leads to several undesired consequences: (i) non-cohesive modules that mix different kinds of knowledge and (ii) logically coupled modules due to a dispersion of conceptually cohesive knowledge. In this paper, we use domain knowledge driven program analysis to detect and characterize discrepancies between the structural modularization of programs and the conceptual decomposition of the implemented knowledge. We characterize the mismatches at the levels of granularity of packages and classes and present their impact on different maintenance activities. The presented approach includes a technique for automating the recovery of mappings between the different categories of knowledge used in the program and the modules that implement them. We briefly present our experience with analyzing JHotDraw.},
        keywords={program diagnostics; noncohesive module; conceptually cohesive knowledge; object oriented design; programs logical modularity; object-oriented programming; domain knowledge-driven program analysis; ontology; logically coupled module; software maintenance; maintenance activity; conceptual decomposition; ontologies (artificial intelligence)},
        isbn={0769538673, 9780769538679},
        language={English},
}
}

@article{
        Functional1989,
        author={HUGHES,J.},
        year={1989},
        title={WHY FUNCTIONAL PROGRAMMING MATTERS},
        journal={COMPUTER JOURNAL},
        volume={32},
        number={2},
        pages={98-107},
        note={\url{http://gateway.webofknowledge.com/gateway/Gateway.cgi?GWVersion=2&SrcAuth=SerialsSolutions&SrcApp=Summon&KeyUT=A1989U144600002&DestLinkType=FullRecord&DestApp=WOS}},
        keywords={COMPUTER SCIENCE, HARDWARE & ARCHITECTURE},
        isbn={0010-4620},
        language={English},
}
}

@misc{
        WETness,
        title={The WET Cart - The Daily WTF},
        howpublished={\url{http://thedailywtf.com/articles/The-WET-Cart}},
        note={Accessed: 2014-12-02}
}


